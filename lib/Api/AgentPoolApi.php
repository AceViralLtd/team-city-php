<?php
/**
 * AgentPoolApi
 * PHP version 5
 *
 * @category Class
 * @package  AceViral\TeamCity
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AceViral\TeamCity\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AceViral\TeamCity\ApiException;
use AceViral\TeamCity\Configuration;
use AceViral\TeamCity\HeaderSelector;
use AceViral\TeamCity\ObjectSerializer;

/**
 * AgentPoolApi Class Doc Comment
 *
 * @category Class
 * @package  AceViral\TeamCity
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgentPoolApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addAgentToAgentPool
     *
     * Assign the agent to the matching agent pool.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Agent $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\Agent
     */
    public function addAgentToAgentPool($agent_pool_locator, $body = null, $fields = null)
    {
        list($response) = $this->addAgentToAgentPoolWithHttpInfo($agent_pool_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation addAgentToAgentPoolWithHttpInfo
     *
     * Assign the agent to the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Agent $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\Agent, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAgentToAgentPoolWithHttpInfo($agent_pool_locator, $body = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Agent';
        $request = $this->addAgentToAgentPoolRequest($agent_pool_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\Agent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAgentToAgentPoolAsync
     *
     * Assign the agent to the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Agent $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAgentToAgentPoolAsync($agent_pool_locator, $body = null, $fields = null)
    {
        return $this->addAgentToAgentPoolAsyncWithHttpInfo($agent_pool_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAgentToAgentPoolAsyncWithHttpInfo
     *
     * Assign the agent to the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Agent $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAgentToAgentPoolAsyncWithHttpInfo($agent_pool_locator, $body = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Agent';
        $request = $this->addAgentToAgentPoolRequest($agent_pool_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAgentToAgentPool'
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Agent $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addAgentToAgentPoolRequest($agent_pool_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling addAgentToAgentPool'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}/agents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addProjectToAgentPool
     *
     * Assign the project to the matching agent pool.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Project $body body (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\Project
     */
    public function addProjectToAgentPool($agent_pool_locator, $body = null)
    {
        list($response) = $this->addProjectToAgentPoolWithHttpInfo($agent_pool_locator, $body);
        return $response;
    }

    /**
     * Operation addProjectToAgentPoolWithHttpInfo
     *
     * Assign the project to the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Project $body (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function addProjectToAgentPoolWithHttpInfo($agent_pool_locator, $body = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Project';
        $request = $this->addProjectToAgentPoolRequest($agent_pool_locator, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addProjectToAgentPoolAsync
     *
     * Assign the project to the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Project $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addProjectToAgentPoolAsync($agent_pool_locator, $body = null)
    {
        return $this->addProjectToAgentPoolAsyncWithHttpInfo($agent_pool_locator, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addProjectToAgentPoolAsyncWithHttpInfo
     *
     * Assign the project to the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Project $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addProjectToAgentPoolAsyncWithHttpInfo($agent_pool_locator, $body = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Project';
        $request = $this->addProjectToAgentPoolRequest($agent_pool_locator, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addProjectToAgentPool'
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Project $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addProjectToAgentPoolRequest($agent_pool_locator, $body = null)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling addProjectToAgentPool'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAgentPool
     *
     * Create a new agent pool.
     *
     * @param  \AceViral\TeamCity\Model\AgentPool $body body (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\AgentPool
     */
    public function createAgentPool($body = null)
    {
        list($response) = $this->createAgentPoolWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAgentPoolWithHttpInfo
     *
     * Create a new agent pool.
     *
     * @param  \AceViral\TeamCity\Model\AgentPool $body (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\AgentPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAgentPoolWithHttpInfo($body = null)
    {
        $returnType = '\AceViral\TeamCity\Model\AgentPool';
        $request = $this->createAgentPoolRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\AgentPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAgentPoolAsync
     *
     * Create a new agent pool.
     *
     * @param  \AceViral\TeamCity\Model\AgentPool $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAgentPoolAsync($body = null)
    {
        return $this->createAgentPoolAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAgentPoolAsyncWithHttpInfo
     *
     * Create a new agent pool.
     *
     * @param  \AceViral\TeamCity\Model\AgentPool $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAgentPoolAsyncWithHttpInfo($body = null)
    {
        $returnType = '\AceViral\TeamCity\Model\AgentPool';
        $request = $this->createAgentPoolRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAgentPool'
     *
     * @param  \AceViral\TeamCity\Model\AgentPool $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAgentPoolRequest($body = null)
    {

        $resourcePath = '/app/rest/agentPools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAgentPool
     *
     * Delete the agent pool matching the locator.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAgentPool($agent_pool_locator)
    {
        $this->deleteAgentPoolWithHttpInfo($agent_pool_locator);
    }

    /**
     * Operation deleteAgentPoolWithHttpInfo
     *
     * Delete the agent pool matching the locator.
     *
     * @param  string $agent_pool_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAgentPoolWithHttpInfo($agent_pool_locator)
    {
        $returnType = '';
        $request = $this->deleteAgentPoolRequest($agent_pool_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAgentPoolAsync
     *
     * Delete the agent pool matching the locator.
     *
     * @param  string $agent_pool_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAgentPoolAsync($agent_pool_locator)
    {
        return $this->deleteAgentPoolAsyncWithHttpInfo($agent_pool_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAgentPoolAsyncWithHttpInfo
     *
     * Delete the agent pool matching the locator.
     *
     * @param  string $agent_pool_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAgentPoolAsyncWithHttpInfo($agent_pool_locator)
    {
        $returnType = '';
        $request = $this->deleteAgentPoolRequest($agent_pool_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAgentPool'
     *
     * @param  string $agent_pool_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAgentPoolRequest($agent_pool_locator)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling deleteAgentPool'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllProjectsFromAgentPool
     *
     * Unassign all projects from the matching agent pool.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAllProjectsFromAgentPool($agent_pool_locator)
    {
        $this->deleteAllProjectsFromAgentPoolWithHttpInfo($agent_pool_locator);
    }

    /**
     * Operation deleteAllProjectsFromAgentPoolWithHttpInfo
     *
     * Unassign all projects from the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllProjectsFromAgentPoolWithHttpInfo($agent_pool_locator)
    {
        $returnType = '';
        $request = $this->deleteAllProjectsFromAgentPoolRequest($agent_pool_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllProjectsFromAgentPoolAsync
     *
     * Unassign all projects from the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllProjectsFromAgentPoolAsync($agent_pool_locator)
    {
        return $this->deleteAllProjectsFromAgentPoolAsyncWithHttpInfo($agent_pool_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllProjectsFromAgentPoolAsyncWithHttpInfo
     *
     * Unassign all projects from the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllProjectsFromAgentPoolAsyncWithHttpInfo($agent_pool_locator)
    {
        $returnType = '';
        $request = $this->deleteAllProjectsFromAgentPoolRequest($agent_pool_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllProjectsFromAgentPool'
     *
     * @param  string $agent_pool_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAllProjectsFromAgentPoolRequest($agent_pool_locator)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling deleteAllProjectsFromAgentPool'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProjectFromAgentPool
     *
     * Unassign the project from the matching agent pool.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     * @param  string $project_locator project_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProjectFromAgentPool($agent_pool_locator, $project_locator)
    {
        $this->deleteProjectFromAgentPoolWithHttpInfo($agent_pool_locator, $project_locator);
    }

    /**
     * Operation deleteProjectFromAgentPoolWithHttpInfo
     *
     * Unassign the project from the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $project_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectFromAgentPoolWithHttpInfo($agent_pool_locator, $project_locator)
    {
        $returnType = '';
        $request = $this->deleteProjectFromAgentPoolRequest($agent_pool_locator, $project_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProjectFromAgentPoolAsync
     *
     * Unassign the project from the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectFromAgentPoolAsync($agent_pool_locator, $project_locator)
    {
        return $this->deleteProjectFromAgentPoolAsyncWithHttpInfo($agent_pool_locator, $project_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProjectFromAgentPoolAsyncWithHttpInfo
     *
     * Unassign the project from the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectFromAgentPoolAsyncWithHttpInfo($agent_pool_locator, $project_locator)
    {
        $returnType = '';
        $request = $this->deleteProjectFromAgentPoolRequest($agent_pool_locator, $project_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProjectFromAgentPool'
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProjectFromAgentPoolRequest($agent_pool_locator, $project_locator)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling deleteProjectFromAgentPool'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling deleteProjectFromAgentPool'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAgentPoolOfAgentPool
     *
     * Get the agent pool matching the locator.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\AgentPool
     */
    public function getAgentPoolOfAgentPool($agent_pool_locator, $fields = null)
    {
        list($response) = $this->getAgentPoolOfAgentPoolWithHttpInfo($agent_pool_locator, $fields);
        return $response;
    }

    /**
     * Operation getAgentPoolOfAgentPoolWithHttpInfo
     *
     * Get the agent pool matching the locator.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\AgentPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAgentPoolOfAgentPoolWithHttpInfo($agent_pool_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\AgentPool';
        $request = $this->getAgentPoolOfAgentPoolRequest($agent_pool_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\AgentPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAgentPoolOfAgentPoolAsync
     *
     * Get the agent pool matching the locator.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgentPoolOfAgentPoolAsync($agent_pool_locator, $fields = null)
    {
        return $this->getAgentPoolOfAgentPoolAsyncWithHttpInfo($agent_pool_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAgentPoolOfAgentPoolAsyncWithHttpInfo
     *
     * Get the agent pool matching the locator.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgentPoolOfAgentPoolAsyncWithHttpInfo($agent_pool_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\AgentPool';
        $request = $this->getAgentPoolOfAgentPoolRequest($agent_pool_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAgentPoolOfAgentPool'
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAgentPoolOfAgentPoolRequest($agent_pool_locator, $fields = null)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling getAgentPoolOfAgentPool'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllAgentPools
     *
     * Get all agent pools.
     *
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\AgentPools
     */
    public function getAllAgentPools($locator = null, $fields = null)
    {
        list($response) = $this->getAllAgentPoolsWithHttpInfo($locator, $fields);
        return $response;
    }

    /**
     * Operation getAllAgentPoolsWithHttpInfo
     *
     * Get all agent pools.
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\AgentPools, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllAgentPoolsWithHttpInfo($locator = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\AgentPools';
        $request = $this->getAllAgentPoolsRequest($locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\AgentPools',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllAgentPoolsAsync
     *
     * Get all agent pools.
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAgentPoolsAsync($locator = null, $fields = null)
    {
        return $this->getAllAgentPoolsAsyncWithHttpInfo($locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllAgentPoolsAsyncWithHttpInfo
     *
     * Get all agent pools.
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAgentPoolsAsyncWithHttpInfo($locator = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\AgentPools';
        $request = $this->getAllAgentPoolsRequest($locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllAgentPools'
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllAgentPoolsRequest($locator = null, $fields = null)
    {

        $resourcePath = '/app/rest/agentPools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllAgentsFromAgentPool
     *
     * Get the agent of the matching agent pool.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\Agents
     */
    public function getAllAgentsFromAgentPool($agent_pool_locator, $locator = null, $fields = null)
    {
        list($response) = $this->getAllAgentsFromAgentPoolWithHttpInfo($agent_pool_locator, $locator, $fields);
        return $response;
    }

    /**
     * Operation getAllAgentsFromAgentPoolWithHttpInfo
     *
     * Get the agent of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\Agents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllAgentsFromAgentPoolWithHttpInfo($agent_pool_locator, $locator = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Agents';
        $request = $this->getAllAgentsFromAgentPoolRequest($agent_pool_locator, $locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\Agents',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllAgentsFromAgentPoolAsync
     *
     * Get the agent of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAgentsFromAgentPoolAsync($agent_pool_locator, $locator = null, $fields = null)
    {
        return $this->getAllAgentsFromAgentPoolAsyncWithHttpInfo($agent_pool_locator, $locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllAgentsFromAgentPoolAsyncWithHttpInfo
     *
     * Get the agent of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAgentsFromAgentPoolAsyncWithHttpInfo($agent_pool_locator, $locator = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Agents';
        $request = $this->getAllAgentsFromAgentPoolRequest($agent_pool_locator, $locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllAgentsFromAgentPool'
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllAgentsFromAgentPoolRequest($agent_pool_locator, $locator = null, $fields = null)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling getAllAgentsFromAgentPool'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}/agents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllProjectsFromAgentPool
     *
     * Get all projects of the matching agent pool.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\Projects
     */
    public function getAllProjectsFromAgentPool($agent_pool_locator, $fields = null)
    {
        list($response) = $this->getAllProjectsFromAgentPoolWithHttpInfo($agent_pool_locator, $fields);
        return $response;
    }

    /**
     * Operation getAllProjectsFromAgentPoolWithHttpInfo
     *
     * Get all projects of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\Projects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllProjectsFromAgentPoolWithHttpInfo($agent_pool_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Projects';
        $request = $this->getAllProjectsFromAgentPoolRequest($agent_pool_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\Projects',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllProjectsFromAgentPoolAsync
     *
     * Get all projects of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProjectsFromAgentPoolAsync($agent_pool_locator, $fields = null)
    {
        return $this->getAllProjectsFromAgentPoolAsyncWithHttpInfo($agent_pool_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllProjectsFromAgentPoolAsyncWithHttpInfo
     *
     * Get all projects of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProjectsFromAgentPoolAsyncWithHttpInfo($agent_pool_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Projects';
        $request = $this->getAllProjectsFromAgentPoolRequest($agent_pool_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllProjectsFromAgentPool'
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllProjectsFromAgentPoolRequest($agent_pool_locator, $fields = null)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling getAllProjectsFromAgentPool'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFieldFromAgentPool
     *
     * Get a field of the matching agent pool.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     * @param  string $field field (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getFieldFromAgentPool($agent_pool_locator, $field)
    {
        list($response) = $this->getFieldFromAgentPoolWithHttpInfo($agent_pool_locator, $field);
        return $response;
    }

    /**
     * Operation getFieldFromAgentPoolWithHttpInfo
     *
     * Get a field of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $field (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFieldFromAgentPoolWithHttpInfo($agent_pool_locator, $field)
    {
        $returnType = 'string';
        $request = $this->getFieldFromAgentPoolRequest($agent_pool_locator, $field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFieldFromAgentPoolAsync
     *
     * Get a field of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFieldFromAgentPoolAsync($agent_pool_locator, $field)
    {
        return $this->getFieldFromAgentPoolAsyncWithHttpInfo($agent_pool_locator, $field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFieldFromAgentPoolAsyncWithHttpInfo
     *
     * Get a field of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFieldFromAgentPoolAsyncWithHttpInfo($agent_pool_locator, $field)
    {
        $returnType = 'string';
        $request = $this->getFieldFromAgentPoolRequest($agent_pool_locator, $field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFieldFromAgentPool'
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFieldFromAgentPoolRequest($agent_pool_locator, $field)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling getFieldFromAgentPool'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling getFieldFromAgentPool'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAgentPoolField
     *
     * Update a field of the matching agent pool.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     * @param  string $field field (required)
     * @param  string $body body (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function setAgentPoolField($agent_pool_locator, $field, $body = null)
    {
        list($response) = $this->setAgentPoolFieldWithHttpInfo($agent_pool_locator, $field, $body);
        return $response;
    }

    /**
     * Operation setAgentPoolFieldWithHttpInfo
     *
     * Update a field of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAgentPoolFieldWithHttpInfo($agent_pool_locator, $field, $body = null)
    {
        $returnType = 'string';
        $request = $this->setAgentPoolFieldRequest($agent_pool_locator, $field, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setAgentPoolFieldAsync
     *
     * Update a field of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAgentPoolFieldAsync($agent_pool_locator, $field, $body = null)
    {
        return $this->setAgentPoolFieldAsyncWithHttpInfo($agent_pool_locator, $field, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAgentPoolFieldAsyncWithHttpInfo
     *
     * Update a field of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAgentPoolFieldAsyncWithHttpInfo($agent_pool_locator, $field, $body = null)
    {
        $returnType = 'string';
        $request = $this->setAgentPoolFieldRequest($agent_pool_locator, $field, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setAgentPoolField'
     *
     * @param  string $agent_pool_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setAgentPoolFieldRequest($agent_pool_locator, $field, $body = null)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling setAgentPoolField'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling setAgentPoolField'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAgentPoolProjects
     *
     * Update projects of the matching agent pool.
     *
     * @param  string $agent_pool_locator agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Projects $body body (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\Projects
     */
    public function setAgentPoolProjects($agent_pool_locator, $body = null)
    {
        list($response) = $this->setAgentPoolProjectsWithHttpInfo($agent_pool_locator, $body);
        return $response;
    }

    /**
     * Operation setAgentPoolProjectsWithHttpInfo
     *
     * Update projects of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Projects $body (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\Projects, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAgentPoolProjectsWithHttpInfo($agent_pool_locator, $body = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Projects';
        $request = $this->setAgentPoolProjectsRequest($agent_pool_locator, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\Projects',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setAgentPoolProjectsAsync
     *
     * Update projects of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Projects $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAgentPoolProjectsAsync($agent_pool_locator, $body = null)
    {
        return $this->setAgentPoolProjectsAsyncWithHttpInfo($agent_pool_locator, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAgentPoolProjectsAsyncWithHttpInfo
     *
     * Update projects of the matching agent pool.
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Projects $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAgentPoolProjectsAsyncWithHttpInfo($agent_pool_locator, $body = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Projects';
        $request = $this->setAgentPoolProjectsRequest($agent_pool_locator, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setAgentPoolProjects'
     *
     * @param  string $agent_pool_locator (required)
     * @param  \AceViral\TeamCity\Model\Projects $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setAgentPoolProjectsRequest($agent_pool_locator, $body = null)
    {
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling setAgentPoolProjects'
            );
        }

        $resourcePath = '/app/rest/agentPools/{agentPoolLocator}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
