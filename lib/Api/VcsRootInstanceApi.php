<?php
/**
 * VcsRootInstanceApi
 * PHP version 5
 *
 * @category Class
 * @package  AceViral\TeamCity
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AceViral\TeamCity\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AceViral\TeamCity\ApiException;
use AceViral\TeamCity\Configuration;
use AceViral\TeamCity\HeaderSelector;
use AceViral\TeamCity\ObjectSerializer;

/**
 * VcsRootInstanceApi Class Doc Comment
 *
 * @category Class
 * @package  AceViral\TeamCity
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VcsRootInstanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteVcsRootInstanceField
     *
     * Remove a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  string $field field (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteVcsRootInstanceField($vcs_root_instance_locator, $field)
    {
        $this->deleteVcsRootInstanceFieldWithHttpInfo($vcs_root_instance_locator, $field);
    }

    /**
     * Operation deleteVcsRootInstanceFieldWithHttpInfo
     *
     * Remove a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVcsRootInstanceFieldWithHttpInfo($vcs_root_instance_locator, $field)
    {
        $returnType = '';
        $request = $this->deleteVcsRootInstanceFieldRequest($vcs_root_instance_locator, $field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVcsRootInstanceFieldAsync
     *
     * Remove a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVcsRootInstanceFieldAsync($vcs_root_instance_locator, $field)
    {
        return $this->deleteVcsRootInstanceFieldAsyncWithHttpInfo($vcs_root_instance_locator, $field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVcsRootInstanceFieldAsyncWithHttpInfo
     *
     * Remove a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVcsRootInstanceFieldAsyncWithHttpInfo($vcs_root_instance_locator, $field)
    {
        $returnType = '';
        $request = $this->deleteVcsRootInstanceFieldRequest($vcs_root_instance_locator, $field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVcsRootInstanceField'
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteVcsRootInstanceFieldRequest($vcs_root_instance_locator, $field)
    {
        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling deleteVcsRootInstanceField'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling deleteVcsRootInstanceField'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteVcsRootInstanceRepositoryState
     *
     * Delete the last repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteVcsRootInstanceRepositoryState($vcs_root_instance_locator)
    {
        $this->deleteVcsRootInstanceRepositoryStateWithHttpInfo($vcs_root_instance_locator);
    }

    /**
     * Operation deleteVcsRootInstanceRepositoryStateWithHttpInfo
     *
     * Delete the last repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVcsRootInstanceRepositoryStateWithHttpInfo($vcs_root_instance_locator)
    {
        $returnType = '';
        $request = $this->deleteVcsRootInstanceRepositoryStateRequest($vcs_root_instance_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVcsRootInstanceRepositoryStateAsync
     *
     * Delete the last repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVcsRootInstanceRepositoryStateAsync($vcs_root_instance_locator)
    {
        return $this->deleteVcsRootInstanceRepositoryStateAsyncWithHttpInfo($vcs_root_instance_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVcsRootInstanceRepositoryStateAsyncWithHttpInfo
     *
     * Delete the last repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVcsRootInstanceRepositoryStateAsyncWithHttpInfo($vcs_root_instance_locator)
    {
        $returnType = '';
        $request = $this->deleteVcsRootInstanceRepositoryStateRequest($vcs_root_instance_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVcsRootInstanceRepositoryState'
     *
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteVcsRootInstanceRepositoryStateRequest($vcs_root_instance_locator)
    {
        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling deleteVcsRootInstanceRepositoryState'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadFile
     *
     * Download specific file.
     *
     * @param  string $path path (required)
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadFile($path, $vcs_root_instance_locator)
    {
        $this->downloadFileWithHttpInfo($path, $vcs_root_instance_locator);
    }

    /**
     * Operation downloadFileWithHttpInfo
     *
     * Download specific file.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadFileWithHttpInfo($path, $vcs_root_instance_locator)
    {
        $returnType = '';
        $request = $this->downloadFileRequest($path, $vcs_root_instance_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation downloadFileAsync
     *
     * Download specific file.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadFileAsync($path, $vcs_root_instance_locator)
    {
        return $this->downloadFileAsyncWithHttpInfo($path, $vcs_root_instance_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadFileAsyncWithHttpInfo
     *
     * Download specific file.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadFileAsyncWithHttpInfo($path, $vcs_root_instance_locator)
    {
        $returnType = '';
        $request = $this->downloadFileRequest($path, $vcs_root_instance_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadFile'
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadFileRequest($path, $vcs_root_instance_locator)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling downloadFile'
            );
        }
        if (!preg_match("/(\/.*)?/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling VcsRootInstanceApi.downloadFile, must conform to the pattern /(\/.*)?/.");
        }

        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling downloadFile'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }
        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllVcsRootInstances
     *
     * Get all VCS root instances.
     *
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\VcsRootInstances
     */
    public function getAllVcsRootInstances($locator = null, $fields = null)
    {
        list($response) = $this->getAllVcsRootInstancesWithHttpInfo($locator, $fields);
        return $response;
    }

    /**
     * Operation getAllVcsRootInstancesWithHttpInfo
     *
     * Get all VCS root instances.
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\VcsRootInstances, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllVcsRootInstancesWithHttpInfo($locator = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\VcsRootInstances';
        $request = $this->getAllVcsRootInstancesRequest($locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\VcsRootInstances',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllVcsRootInstancesAsync
     *
     * Get all VCS root instances.
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllVcsRootInstancesAsync($locator = null, $fields = null)
    {
        return $this->getAllVcsRootInstancesAsyncWithHttpInfo($locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllVcsRootInstancesAsyncWithHttpInfo
     *
     * Get all VCS root instances.
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllVcsRootInstancesAsyncWithHttpInfo($locator = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\VcsRootInstances';
        $request = $this->getAllVcsRootInstancesRequest($locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllVcsRootInstances'
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllVcsRootInstancesRequest($locator = null, $fields = null)
    {

        $resourcePath = '/app/rest/vcs-root-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFileMetadata
     *
     * Get metadata of specific file.
     *
     * @param  string $path path (required)
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\\SplFileObject
     */
    public function getFileMetadata($path, $vcs_root_instance_locator, $fields = null)
    {
        list($response) = $this->getFileMetadataWithHttpInfo($path, $vcs_root_instance_locator, $fields);
        return $response;
    }

    /**
     * Operation getFileMetadataWithHttpInfo
     *
     * Get metadata of specific file.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\\SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFileMetadataWithHttpInfo($path, $vcs_root_instance_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\\SplFileObject';
        $request = $this->getFileMetadataRequest($path, $vcs_root_instance_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFileMetadataAsync
     *
     * Get metadata of specific file.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFileMetadataAsync($path, $vcs_root_instance_locator, $fields = null)
    {
        return $this->getFileMetadataAsyncWithHttpInfo($path, $vcs_root_instance_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFileMetadataAsyncWithHttpInfo
     *
     * Get metadata of specific file.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFileMetadataAsyncWithHttpInfo($path, $vcs_root_instance_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\\SplFileObject';
        $request = $this->getFileMetadataRequest($path, $vcs_root_instance_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFileMetadata'
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFileMetadataRequest($path, $vcs_root_instance_locator, $fields = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling getFileMetadata'
            );
        }
        if (!preg_match("/(\/.*)?/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling VcsRootInstanceApi.getFileMetadata, must conform to the pattern /(\/.*)?/.");
        }

        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling getFileMetadata'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }
        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFilesList
     *
     * List all files.
     *
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  string $base_path base_path (optional)
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\Files
     */
    public function getFilesList($vcs_root_instance_locator, $base_path = null, $locator = null, $fields = null)
    {
        list($response) = $this->getFilesListWithHttpInfo($vcs_root_instance_locator, $base_path, $locator, $fields);
        return $response;
    }

    /**
     * Operation getFilesListWithHttpInfo
     *
     * List all files.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\Files, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFilesListWithHttpInfo($vcs_root_instance_locator, $base_path = null, $locator = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Files';
        $request = $this->getFilesListRequest($vcs_root_instance_locator, $base_path, $locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\Files',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFilesListAsync
     *
     * List all files.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFilesListAsync($vcs_root_instance_locator, $base_path = null, $locator = null, $fields = null)
    {
        return $this->getFilesListAsyncWithHttpInfo($vcs_root_instance_locator, $base_path, $locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFilesListAsyncWithHttpInfo
     *
     * List all files.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFilesListAsyncWithHttpInfo($vcs_root_instance_locator, $base_path = null, $locator = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Files';
        $request = $this->getFilesListRequest($vcs_root_instance_locator, $base_path, $locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFilesList'
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFilesListRequest($vcs_root_instance_locator, $base_path = null, $locator = null, $fields = null)
    {
        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling getFilesList'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($base_path !== null) {
            $queryParams['basePath'] = ObjectSerializer::toQueryValue($base_path);
        }
        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFilesListForSubpath
     *
     * List files under this path.
     *
     * @param  string $path path (required)
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  string $base_path base_path (optional)
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\Files
     */
    public function getFilesListForSubpath($path, $vcs_root_instance_locator, $base_path = null, $locator = null, $fields = null)
    {
        list($response) = $this->getFilesListForSubpathWithHttpInfo($path, $vcs_root_instance_locator, $base_path, $locator, $fields);
        return $response;
    }

    /**
     * Operation getFilesListForSubpathWithHttpInfo
     *
     * List files under this path.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\Files, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFilesListForSubpathWithHttpInfo($path, $vcs_root_instance_locator, $base_path = null, $locator = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Files';
        $request = $this->getFilesListForSubpathRequest($path, $vcs_root_instance_locator, $base_path, $locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\Files',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFilesListForSubpathAsync
     *
     * List files under this path.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFilesListForSubpathAsync($path, $vcs_root_instance_locator, $base_path = null, $locator = null, $fields = null)
    {
        return $this->getFilesListForSubpathAsyncWithHttpInfo($path, $vcs_root_instance_locator, $base_path, $locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFilesListForSubpathAsyncWithHttpInfo
     *
     * List files under this path.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFilesListForSubpathAsyncWithHttpInfo($path, $vcs_root_instance_locator, $base_path = null, $locator = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Files';
        $request = $this->getFilesListForSubpathRequest($path, $vcs_root_instance_locator, $base_path, $locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFilesListForSubpath'
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFilesListForSubpathRequest($path, $vcs_root_instance_locator, $base_path = null, $locator = null, $fields = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling getFilesListForSubpath'
            );
        }
        if (!preg_match("/(.*)?/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling VcsRootInstanceApi.getFilesListForSubpath, must conform to the pattern /(.*)?/.");
        }

        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling getFilesListForSubpath'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($base_path !== null) {
            $queryParams['basePath'] = ObjectSerializer::toQueryValue($base_path);
        }
        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }
        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVcsRootInstance
     *
     * Get VCS root instance matching the locator.
     *
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\VcsRootInstance
     */
    public function getVcsRootInstance($vcs_root_instance_locator, $fields = null)
    {
        list($response) = $this->getVcsRootInstanceWithHttpInfo($vcs_root_instance_locator, $fields);
        return $response;
    }

    /**
     * Operation getVcsRootInstanceWithHttpInfo
     *
     * Get VCS root instance matching the locator.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\VcsRootInstance, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVcsRootInstanceWithHttpInfo($vcs_root_instance_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\VcsRootInstance';
        $request = $this->getVcsRootInstanceRequest($vcs_root_instance_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\VcsRootInstance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVcsRootInstanceAsync
     *
     * Get VCS root instance matching the locator.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVcsRootInstanceAsync($vcs_root_instance_locator, $fields = null)
    {
        return $this->getVcsRootInstanceAsyncWithHttpInfo($vcs_root_instance_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVcsRootInstanceAsyncWithHttpInfo
     *
     * Get VCS root instance matching the locator.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVcsRootInstanceAsyncWithHttpInfo($vcs_root_instance_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\VcsRootInstance';
        $request = $this->getVcsRootInstanceRequest($vcs_root_instance_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVcsRootInstance'
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVcsRootInstanceRequest($vcs_root_instance_locator, $fields = null)
    {
        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling getVcsRootInstance'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVcsRootInstanceCreationDate
     *
     * Get the creation date of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getVcsRootInstanceCreationDate($vcs_root_instance_locator)
    {
        list($response) = $this->getVcsRootInstanceCreationDateWithHttpInfo($vcs_root_instance_locator);
        return $response;
    }

    /**
     * Operation getVcsRootInstanceCreationDateWithHttpInfo
     *
     * Get the creation date of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVcsRootInstanceCreationDateWithHttpInfo($vcs_root_instance_locator)
    {
        $returnType = 'string';
        $request = $this->getVcsRootInstanceCreationDateRequest($vcs_root_instance_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVcsRootInstanceCreationDateAsync
     *
     * Get the creation date of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVcsRootInstanceCreationDateAsync($vcs_root_instance_locator)
    {
        return $this->getVcsRootInstanceCreationDateAsyncWithHttpInfo($vcs_root_instance_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVcsRootInstanceCreationDateAsyncWithHttpInfo
     *
     * Get the creation date of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVcsRootInstanceCreationDateAsyncWithHttpInfo($vcs_root_instance_locator)
    {
        $returnType = 'string';
        $request = $this->getVcsRootInstanceCreationDateRequest($vcs_root_instance_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVcsRootInstanceCreationDate'
     *
     * @param  string $vcs_root_instance_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVcsRootInstanceCreationDateRequest($vcs_root_instance_locator)
    {
        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling getVcsRootInstanceCreationDate'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVcsRootInstanceField
     *
     * Get a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  string $field field (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getVcsRootInstanceField($vcs_root_instance_locator, $field)
    {
        list($response) = $this->getVcsRootInstanceFieldWithHttpInfo($vcs_root_instance_locator, $field);
        return $response;
    }

    /**
     * Operation getVcsRootInstanceFieldWithHttpInfo
     *
     * Get a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVcsRootInstanceFieldWithHttpInfo($vcs_root_instance_locator, $field)
    {
        $returnType = 'string';
        $request = $this->getVcsRootInstanceFieldRequest($vcs_root_instance_locator, $field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVcsRootInstanceFieldAsync
     *
     * Get a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVcsRootInstanceFieldAsync($vcs_root_instance_locator, $field)
    {
        return $this->getVcsRootInstanceFieldAsyncWithHttpInfo($vcs_root_instance_locator, $field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVcsRootInstanceFieldAsyncWithHttpInfo
     *
     * Get a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVcsRootInstanceFieldAsyncWithHttpInfo($vcs_root_instance_locator, $field)
    {
        $returnType = 'string';
        $request = $this->getVcsRootInstanceFieldRequest($vcs_root_instance_locator, $field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVcsRootInstanceField'
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVcsRootInstanceFieldRequest($vcs_root_instance_locator, $field)
    {
        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling getVcsRootInstanceField'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling getVcsRootInstanceField'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVcsRootInstanceProperties
     *
     * Get all properties of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\Properties
     */
    public function getVcsRootInstanceProperties($vcs_root_instance_locator, $fields = null)
    {
        list($response) = $this->getVcsRootInstancePropertiesWithHttpInfo($vcs_root_instance_locator, $fields);
        return $response;
    }

    /**
     * Operation getVcsRootInstancePropertiesWithHttpInfo
     *
     * Get all properties of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\Properties, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVcsRootInstancePropertiesWithHttpInfo($vcs_root_instance_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Properties';
        $request = $this->getVcsRootInstancePropertiesRequest($vcs_root_instance_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\Properties',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVcsRootInstancePropertiesAsync
     *
     * Get all properties of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVcsRootInstancePropertiesAsync($vcs_root_instance_locator, $fields = null)
    {
        return $this->getVcsRootInstancePropertiesAsyncWithHttpInfo($vcs_root_instance_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVcsRootInstancePropertiesAsyncWithHttpInfo
     *
     * Get all properties of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVcsRootInstancePropertiesAsyncWithHttpInfo($vcs_root_instance_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Properties';
        $request = $this->getVcsRootInstancePropertiesRequest($vcs_root_instance_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVcsRootInstanceProperties'
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVcsRootInstancePropertiesRequest($vcs_root_instance_locator, $fields = null)
    {
        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling getVcsRootInstanceProperties'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVcsRootInstanceRepositoryState
     *
     * Get the repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\Entries
     */
    public function getVcsRootInstanceRepositoryState($vcs_root_instance_locator, $fields = null)
    {
        list($response) = $this->getVcsRootInstanceRepositoryStateWithHttpInfo($vcs_root_instance_locator, $fields);
        return $response;
    }

    /**
     * Operation getVcsRootInstanceRepositoryStateWithHttpInfo
     *
     * Get the repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\Entries, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVcsRootInstanceRepositoryStateWithHttpInfo($vcs_root_instance_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Entries';
        $request = $this->getVcsRootInstanceRepositoryStateRequest($vcs_root_instance_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\Entries',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVcsRootInstanceRepositoryStateAsync
     *
     * Get the repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVcsRootInstanceRepositoryStateAsync($vcs_root_instance_locator, $fields = null)
    {
        return $this->getVcsRootInstanceRepositoryStateAsyncWithHttpInfo($vcs_root_instance_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVcsRootInstanceRepositoryStateAsyncWithHttpInfo
     *
     * Get the repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVcsRootInstanceRepositoryStateAsyncWithHttpInfo($vcs_root_instance_locator, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Entries';
        $request = $this->getVcsRootInstanceRepositoryStateRequest($vcs_root_instance_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVcsRootInstanceRepositoryState'
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVcsRootInstanceRepositoryStateRequest($vcs_root_instance_locator, $fields = null)
    {
        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling getVcsRootInstanceRepositoryState'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZippedFile
     *
     * Get specific file zipped.
     *
     * @param  string $path path (required)
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  string $base_path base_path (optional)
     * @param  string $locator locator (optional)
     * @param  string $name name (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getZippedFile($path, $vcs_root_instance_locator, $base_path = null, $locator = null, $name = null)
    {
        $this->getZippedFileWithHttpInfo($path, $vcs_root_instance_locator, $base_path, $locator, $name);
    }

    /**
     * Operation getZippedFileWithHttpInfo
     *
     * Get specific file zipped.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $name (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getZippedFileWithHttpInfo($path, $vcs_root_instance_locator, $base_path = null, $locator = null, $name = null)
    {
        $returnType = '';
        $request = $this->getZippedFileRequest($path, $vcs_root_instance_locator, $base_path, $locator, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getZippedFileAsync
     *
     * Get specific file zipped.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZippedFileAsync($path, $vcs_root_instance_locator, $base_path = null, $locator = null, $name = null)
    {
        return $this->getZippedFileAsyncWithHttpInfo($path, $vcs_root_instance_locator, $base_path, $locator, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getZippedFileAsyncWithHttpInfo
     *
     * Get specific file zipped.
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZippedFileAsyncWithHttpInfo($path, $vcs_root_instance_locator, $base_path = null, $locator = null, $name = null)
    {
        $returnType = '';
        $request = $this->getZippedFileRequest($path, $vcs_root_instance_locator, $base_path, $locator, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZippedFile'
     *
     * @param  string $path (required)
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $base_path (optional)
     * @param  string $locator (optional)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getZippedFileRequest($path, $vcs_root_instance_locator, $base_path = null, $locator = null, $name = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling getZippedFile'
            );
        }
        if (!preg_match("/(\/.*)?/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling VcsRootInstanceApi.getZippedFile, must conform to the pattern /(\/.*)?/.");
        }

        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling getZippedFile'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($base_path !== null) {
            $queryParams['basePath'] = ObjectSerializer::toQueryValue($base_path);
        }
        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }

        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }
        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestPendingChangesCheck
     *
     * Check for the pending changes for all VCS root instances.
     *
     * @param  string $locator locator (optional)
     * @param  string $requestor requestor (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\VcsRootInstances
     */
    public function requestPendingChangesCheck($locator = null, $requestor = null, $fields = null)
    {
        list($response) = $this->requestPendingChangesCheckWithHttpInfo($locator, $requestor, $fields);
        return $response;
    }

    /**
     * Operation requestPendingChangesCheckWithHttpInfo
     *
     * Check for the pending changes for all VCS root instances.
     *
     * @param  string $locator (optional)
     * @param  string $requestor (optional)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\VcsRootInstances, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestPendingChangesCheckWithHttpInfo($locator = null, $requestor = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\VcsRootInstances';
        $request = $this->requestPendingChangesCheckRequest($locator, $requestor, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\VcsRootInstances',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestPendingChangesCheckAsync
     *
     * Check for the pending changes for all VCS root instances.
     *
     * @param  string $locator (optional)
     * @param  string $requestor (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestPendingChangesCheckAsync($locator = null, $requestor = null, $fields = null)
    {
        return $this->requestPendingChangesCheckAsyncWithHttpInfo($locator, $requestor, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestPendingChangesCheckAsyncWithHttpInfo
     *
     * Check for the pending changes for all VCS root instances.
     *
     * @param  string $locator (optional)
     * @param  string $requestor (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestPendingChangesCheckAsyncWithHttpInfo($locator = null, $requestor = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\VcsRootInstances';
        $request = $this->requestPendingChangesCheckRequest($locator, $requestor, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestPendingChangesCheck'
     *
     * @param  string $locator (optional)
     * @param  string $requestor (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestPendingChangesCheckRequest($locator = null, $requestor = null, $fields = null)
    {

        $resourcePath = '/app/rest/vcs-root-instances/checkingForChangesQueue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($requestor !== null) {
            $queryParams['requestor'] = ObjectSerializer::toQueryValue($requestor);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setVcsRootInstanceField
     *
     * Get a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  string $field field (required)
     * @param  string $body body (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function setVcsRootInstanceField($vcs_root_instance_locator, $field, $body = null)
    {
        list($response) = $this->setVcsRootInstanceFieldWithHttpInfo($vcs_root_instance_locator, $field, $body);
        return $response;
    }

    /**
     * Operation setVcsRootInstanceFieldWithHttpInfo
     *
     * Get a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setVcsRootInstanceFieldWithHttpInfo($vcs_root_instance_locator, $field, $body = null)
    {
        $returnType = 'string';
        $request = $this->setVcsRootInstanceFieldRequest($vcs_root_instance_locator, $field, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setVcsRootInstanceFieldAsync
     *
     * Get a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setVcsRootInstanceFieldAsync($vcs_root_instance_locator, $field, $body = null)
    {
        return $this->setVcsRootInstanceFieldAsyncWithHttpInfo($vcs_root_instance_locator, $field, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setVcsRootInstanceFieldAsyncWithHttpInfo
     *
     * Get a field of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setVcsRootInstanceFieldAsyncWithHttpInfo($vcs_root_instance_locator, $field, $body = null)
    {
        $returnType = 'string';
        $request = $this->setVcsRootInstanceFieldRequest($vcs_root_instance_locator, $field, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setVcsRootInstanceField'
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setVcsRootInstanceFieldRequest($vcs_root_instance_locator, $field, $body = null)
    {
        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling setVcsRootInstanceField'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling setVcsRootInstanceField'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setVcsRootInstanceRepositoryState
     *
     * Update the repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator vcs_root_instance_locator (required)
     * @param  \AceViral\TeamCity\Model\Entries $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AceViral\TeamCity\Model\Entries
     */
    public function setVcsRootInstanceRepositoryState($vcs_root_instance_locator, $body = null, $fields = null)
    {
        list($response) = $this->setVcsRootInstanceRepositoryStateWithHttpInfo($vcs_root_instance_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation setVcsRootInstanceRepositoryStateWithHttpInfo
     *
     * Update the repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  \AceViral\TeamCity\Model\Entries $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AceViral\TeamCity\Model\Entries, HTTP status code, HTTP response headers (array of strings)
     */
    public function setVcsRootInstanceRepositoryStateWithHttpInfo($vcs_root_instance_locator, $body = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Entries';
        $request = $this->setVcsRootInstanceRepositoryStateRequest($vcs_root_instance_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AceViral\TeamCity\Model\Entries',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setVcsRootInstanceRepositoryStateAsync
     *
     * Update the repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  \AceViral\TeamCity\Model\Entries $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setVcsRootInstanceRepositoryStateAsync($vcs_root_instance_locator, $body = null, $fields = null)
    {
        return $this->setVcsRootInstanceRepositoryStateAsyncWithHttpInfo($vcs_root_instance_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setVcsRootInstanceRepositoryStateAsyncWithHttpInfo
     *
     * Update the repository state of the matching VCS root instance.
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  \AceViral\TeamCity\Model\Entries $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setVcsRootInstanceRepositoryStateAsyncWithHttpInfo($vcs_root_instance_locator, $body = null, $fields = null)
    {
        $returnType = '\AceViral\TeamCity\Model\Entries';
        $request = $this->setVcsRootInstanceRepositoryStateRequest($vcs_root_instance_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setVcsRootInstanceRepositoryState'
     *
     * @param  string $vcs_root_instance_locator (required)
     * @param  \AceViral\TeamCity\Model\Entries $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setVcsRootInstanceRepositoryStateRequest($vcs_root_instance_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'vcs_root_instance_locator' is set
        if ($vcs_root_instance_locator === null || (is_array($vcs_root_instance_locator) && count($vcs_root_instance_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vcs_root_instance_locator when calling setVcsRootInstanceRepositoryState'
            );
        }

        $resourcePath = '/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($vcs_root_instance_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'vcsRootInstanceLocator' . '}',
                ObjectSerializer::toPathValue($vcs_root_instance_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation triggerCommitHookNotification
     *
     * Send the commit hook notification.
     *
     * @param  string $locator locator (optional)
     * @param  bool $ok_on_nothing_found ok_on_nothing_found (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function triggerCommitHookNotification($locator = null, $ok_on_nothing_found = null)
    {
        $this->triggerCommitHookNotificationWithHttpInfo($locator, $ok_on_nothing_found);
    }

    /**
     * Operation triggerCommitHookNotificationWithHttpInfo
     *
     * Send the commit hook notification.
     *
     * @param  string $locator (optional)
     * @param  bool $ok_on_nothing_found (optional)
     *
     * @throws \AceViral\TeamCity\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function triggerCommitHookNotificationWithHttpInfo($locator = null, $ok_on_nothing_found = null)
    {
        $returnType = '';
        $request = $this->triggerCommitHookNotificationRequest($locator, $ok_on_nothing_found);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation triggerCommitHookNotificationAsync
     *
     * Send the commit hook notification.
     *
     * @param  string $locator (optional)
     * @param  bool $ok_on_nothing_found (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function triggerCommitHookNotificationAsync($locator = null, $ok_on_nothing_found = null)
    {
        return $this->triggerCommitHookNotificationAsyncWithHttpInfo($locator, $ok_on_nothing_found)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation triggerCommitHookNotificationAsyncWithHttpInfo
     *
     * Send the commit hook notification.
     *
     * @param  string $locator (optional)
     * @param  bool $ok_on_nothing_found (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function triggerCommitHookNotificationAsyncWithHttpInfo($locator = null, $ok_on_nothing_found = null)
    {
        $returnType = '';
        $request = $this->triggerCommitHookNotificationRequest($locator, $ok_on_nothing_found);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'triggerCommitHookNotification'
     *
     * @param  string $locator (optional)
     * @param  bool $ok_on_nothing_found (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function triggerCommitHookNotificationRequest($locator = null, $ok_on_nothing_found = null)
    {

        $resourcePath = '/app/rest/vcs-root-instances/commitHookNotification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($ok_on_nothing_found !== null) {
            $queryParams['okOnNothingFound'] = ObjectSerializer::toQueryValue($ok_on_nothing_found);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
