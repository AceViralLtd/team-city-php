<?php
/**
 * ChangeLocator
 *
 * PHP version 5
 *
 * @category Class
 * @package  AceViral\TeamCity
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AceViral\TeamCity\Model;

use \ArrayAccess;
use \AceViral\TeamCity\ObjectSerializer;

/**
 * ChangeLocator Class Doc Comment
 *
 * @category Class
 * @description Represents a locator string for filtering Change entities.
 * @package  AceViral\TeamCity
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChangeLocator implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChangeLocator';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'build' => 'string',
        'build_type' => 'string',
        'comment' => 'string',
        'count' => 'int',
        'file' => 'string',
        'id' => 'int',
        'internal_version' => 'string',
        'item' => 'string',
        'pending' => 'bool',
        'project' => 'string',
        'since_change' => 'string',
        'start' => 'int',
        'user' => 'string',
        'username' => 'string',
        'vcs_root' => 'string',
        'vcs_root_instance' => 'string',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'build' => 'BuildLocator',
        'build_type' => 'BuildTypeLocator',
        'comment' => null,
        'count' => 'int32',
        'file' => null,
        'id' => 'int32',
        'internal_version' => null,
        'item' => 'item:(<locator1>),item:(<locator2>...)',
        'pending' => null,
        'project' => 'ProjectLocator',
        'since_change' => null,
        'start' => 'int32',
        'user' => 'UserLocator',
        'username' => null,
        'vcs_root' => 'VcsRootLocator',
        'vcs_root_instance' => 'VcsRootInstanceLocator',
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'build' => 'build',
        'build_type' => 'buildType',
        'comment' => 'comment',
        'count' => 'count',
        'file' => 'file',
        'id' => 'id',
        'internal_version' => 'internalVersion',
        'item' => 'item',
        'pending' => 'pending',
        'project' => 'project',
        'since_change' => 'sinceChange',
        'start' => 'start',
        'user' => 'user',
        'username' => 'username',
        'vcs_root' => 'vcsRoot',
        'vcs_root_instance' => 'vcsRootInstance',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'build' => 'setBuild',
        'build_type' => 'setBuildType',
        'comment' => 'setComment',
        'count' => 'setCount',
        'file' => 'setFile',
        'id' => 'setId',
        'internal_version' => 'setInternalVersion',
        'item' => 'setItem',
        'pending' => 'setPending',
        'project' => 'setProject',
        'since_change' => 'setSinceChange',
        'start' => 'setStart',
        'user' => 'setUser',
        'username' => 'setUsername',
        'vcs_root' => 'setVcsRoot',
        'vcs_root_instance' => 'setVcsRootInstance',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'build' => 'getBuild',
        'build_type' => 'getBuildType',
        'comment' => 'getComment',
        'count' => 'getCount',
        'file' => 'getFile',
        'id' => 'getId',
        'internal_version' => 'getInternalVersion',
        'item' => 'getItem',
        'pending' => 'getPending',
        'project' => 'getProject',
        'since_change' => 'getSinceChange',
        'start' => 'getStart',
        'user' => 'getUser',
        'username' => 'getUsername',
        'vcs_root' => 'getVcsRoot',
        'vcs_root_instance' => 'getVcsRootInstance',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['build_type'] = isset($data['build_type']) ? $data['build_type'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['internal_version'] = isset($data['internal_version']) ? $data['internal_version'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['pending'] = isset($data['pending']) ? $data['pending'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['since_change'] = isset($data['since_change']) ? $data['since_change'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['vcs_root'] = isset($data['vcs_root']) ? $data['vcs_root'] : null;
        $this->container['vcs_root_instance'] = isset($data['vcs_root_instance']) ? $data['vcs_root_instance'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets build
     *
     * @return string
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param string $build Build locator.
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets build_type
     *
     * @return string
     */
    public function getBuildType()
    {
        return $this->container['build_type'];
    }

    /**
     * Sets build_type
     *
     * @param string $build_type Build type locator.
     *
     * @return $this
     */
    public function setBuildType($build_type)
    {
        $this->container['build_type'] = $build_type;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count For paginated calls, how many entities to return per page.
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string $file file
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Entity ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets internal_version
     *
     * @return string
     */
    public function getInternalVersion()
    {
        return $this->container['internal_version'];
    }

    /**
     * Sets internal_version
     *
     * @param string $internal_version internal_version
     *
     * @return $this
     */
    public function setInternalVersion($internal_version)
    {
        $this->container['internal_version'] = $internal_version;

        return $this;
    }

    /**
     * Gets item
     *
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string $item Supply multiple locators and return a union of the results.
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return bool
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param bool $pending Is pending.
     *
     * @return $this
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string $project Project locator.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets since_change
     *
     * @return string
     */
    public function getSinceChange()
    {
        return $this->container['since_change'];
    }

    /**
     * Sets since_change
     *
     * @param string $since_change Commit SHA since which the changes should be returned.
     *
     * @return $this
     */
    public function setSinceChange($since_change)
    {
        $this->container['since_change'] = $since_change;

        return $this;
    }

    /**
     * Gets start
     *
     * @return int
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param int $start For paginated calls, from which entity to start rendering the page.
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user User locator.
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username VCS side username.
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets vcs_root
     *
     * @return string
     */
    public function getVcsRoot()
    {
        return $this->container['vcs_root'];
    }

    /**
     * Sets vcs_root
     *
     * @param string $vcs_root VCS root locator.
     *
     * @return $this
     */
    public function setVcsRoot($vcs_root)
    {
        $this->container['vcs_root'] = $vcs_root;

        return $this;
    }

    /**
     * Gets vcs_root_instance
     *
     * @return string
     */
    public function getVcsRootInstance()
    {
        return $this->container['vcs_root_instance'];
    }

    /**
     * Sets vcs_root_instance
     *
     * @param string $vcs_root_instance VCS instance locator.
     *
     * @return $this
     */
    public function setVcsRootInstance($vcs_root_instance)
    {
        $this->container['vcs_root_instance'] = $vcs_root_instance;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


