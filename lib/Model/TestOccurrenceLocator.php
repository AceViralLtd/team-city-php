<?php
/**
 * TestOccurrenceLocator
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TestOccurrenceLocator Class Doc Comment
 *
 * @category Class
 * @description Represents a locator string for filtering TestOccurrence entities.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestOccurrenceLocator implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestOccurrenceLocator';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'affected_project' => 'string',
        'branch' => 'string',
        'build' => 'string',
        'build_type' => 'string',
        'count' => 'int',
        'currently_failing' => 'bool',
        'currently_investigated' => 'bool',
        'currently_muted' => 'string',
        'id' => 'int',
        'ignored' => 'bool',
        'include_personal' => 'bool',
        'item' => 'string',
        'lookup_limit' => 'int',
        'muted' => 'bool',
        'name' => 'string',
        'new_failure' => 'string',
        'start' => 'int',
        'status' => 'string',
        'test' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'affected_project' => 'ProjectLocator',
        'branch' => null,
        'build' => 'BuildLocator',
        'build_type' => 'BuildTypeLocator',
        'count' => 'int32',
        'currently_failing' => null,
        'currently_investigated' => null,
        'currently_muted' => null,
        'id' => 'int32',
        'ignored' => null,
        'include_personal' => null,
        'item' => 'item:(<locator1>),item:(<locator2>...)',
        'lookup_limit' => 'int32',
        'muted' => null,
        'name' => null,
        'new_failure' => null,
        'start' => 'int32',
        'status' => null,
        'test' => 'TestLocator'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affected_project' => 'affectedProject',
        'branch' => 'branch',
        'build' => 'build',
        'build_type' => 'buildType',
        'count' => 'count',
        'currently_failing' => 'currentlyFailing',
        'currently_investigated' => 'currentlyInvestigated',
        'currently_muted' => 'currentlyMuted',
        'id' => 'id',
        'ignored' => 'ignored',
        'include_personal' => 'includePersonal',
        'item' => 'item',
        'lookup_limit' => 'lookupLimit',
        'muted' => 'muted',
        'name' => 'name',
        'new_failure' => 'newFailure',
        'start' => 'start',
        'status' => 'status',
        'test' => 'test'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affected_project' => 'setAffectedProject',
        'branch' => 'setBranch',
        'build' => 'setBuild',
        'build_type' => 'setBuildType',
        'count' => 'setCount',
        'currently_failing' => 'setCurrentlyFailing',
        'currently_investigated' => 'setCurrentlyInvestigated',
        'currently_muted' => 'setCurrentlyMuted',
        'id' => 'setId',
        'ignored' => 'setIgnored',
        'include_personal' => 'setIncludePersonal',
        'item' => 'setItem',
        'lookup_limit' => 'setLookupLimit',
        'muted' => 'setMuted',
        'name' => 'setName',
        'new_failure' => 'setNewFailure',
        'start' => 'setStart',
        'status' => 'setStatus',
        'test' => 'setTest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affected_project' => 'getAffectedProject',
        'branch' => 'getBranch',
        'build' => 'getBuild',
        'build_type' => 'getBuildType',
        'count' => 'getCount',
        'currently_failing' => 'getCurrentlyFailing',
        'currently_investigated' => 'getCurrentlyInvestigated',
        'currently_muted' => 'getCurrentlyMuted',
        'id' => 'getId',
        'ignored' => 'getIgnored',
        'include_personal' => 'getIncludePersonal',
        'item' => 'getItem',
        'lookup_limit' => 'getLookupLimit',
        'muted' => 'getMuted',
        'name' => 'getName',
        'new_failure' => 'getNewFailure',
        'start' => 'getStart',
        'status' => 'getStatus',
        'test' => 'getTest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_UNKNOWN = 'unknown';
    const STATUS_NORMAL = 'normal';
    const STATUS_WARNING = 'warning';
    const STATUS_FAILURE = 'failure';
    const STATUS_ERROR = 'error';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_NORMAL,
            self::STATUS_WARNING,
            self::STATUS_FAILURE,
            self::STATUS_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['affected_project'] = isset($data['affected_project']) ? $data['affected_project'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['build_type'] = isset($data['build_type']) ? $data['build_type'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['currently_failing'] = isset($data['currently_failing']) ? $data['currently_failing'] : null;
        $this->container['currently_investigated'] = isset($data['currently_investigated']) ? $data['currently_investigated'] : null;
        $this->container['currently_muted'] = isset($data['currently_muted']) ? $data['currently_muted'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ignored'] = isset($data['ignored']) ? $data['ignored'] : null;
        $this->container['include_personal'] = isset($data['include_personal']) ? $data['include_personal'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['lookup_limit'] = isset($data['lookup_limit']) ? $data['lookup_limit'] : null;
        $this->container['muted'] = isset($data['muted']) ? $data['muted'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['new_failure'] = isset($data['new_failure']) ? $data['new_failure'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets affected_project
     *
     * @return string
     */
    public function getAffectedProject()
    {
        return $this->container['affected_project'];
    }

    /**
     * Sets affected_project
     *
     * @param string $affected_project Project (direct or indirect parent) locator.
     *
     * @return $this
     */
    public function setAffectedProject($affected_project)
    {
        $this->container['affected_project'] = $affected_project;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets build
     *
     * @return string
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param string $build Build locator.
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets build_type
     *
     * @return string
     */
    public function getBuildType()
    {
        return $this->container['build_type'];
    }

    /**
     * Sets build_type
     *
     * @param string $build_type Build type locator.
     *
     * @return $this
     */
    public function setBuildType($build_type)
    {
        $this->container['build_type'] = $build_type;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count For paginated calls, how many entities to return per page.
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets currently_failing
     *
     * @return bool
     */
    public function getCurrentlyFailing()
    {
        return $this->container['currently_failing'];
    }

    /**
     * Sets currently_failing
     *
     * @param bool $currently_failing Is currently failing.
     *
     * @return $this
     */
    public function setCurrentlyFailing($currently_failing)
    {
        $this->container['currently_failing'] = $currently_failing;

        return $this;
    }

    /**
     * Gets currently_investigated
     *
     * @return bool
     */
    public function getCurrentlyInvestigated()
    {
        return $this->container['currently_investigated'];
    }

    /**
     * Sets currently_investigated
     *
     * @param bool $currently_investigated Is currently investigated.
     *
     * @return $this
     */
    public function setCurrentlyInvestigated($currently_investigated)
    {
        $this->container['currently_investigated'] = $currently_investigated;

        return $this;
    }

    /**
     * Gets currently_muted
     *
     * @return string
     */
    public function getCurrentlyMuted()
    {
        return $this->container['currently_muted'];
    }

    /**
     * Sets currently_muted
     *
     * @param string $currently_muted currently_muted
     *
     * @return $this
     */
    public function setCurrentlyMuted($currently_muted)
    {
        $this->container['currently_muted'] = $currently_muted;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Entity ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ignored
     *
     * @return bool
     */
    public function getIgnored()
    {
        return $this->container['ignored'];
    }

    /**
     * Sets ignored
     *
     * @param bool $ignored Is ignored.
     *
     * @return $this
     */
    public function setIgnored($ignored)
    {
        $this->container['ignored'] = $ignored;

        return $this;
    }

    /**
     * Gets include_personal
     *
     * @return bool
     */
    public function getIncludePersonal()
    {
        return $this->container['include_personal'];
    }

    /**
     * Sets include_personal
     *
     * @param bool $include_personal include_personal
     *
     * @return $this
     */
    public function setIncludePersonal($include_personal)
    {
        $this->container['include_personal'] = $include_personal;

        return $this;
    }

    /**
     * Gets item
     *
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string $item Supply multiple locators and return a union of the results.
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets lookup_limit
     *
     * @return int
     */
    public function getLookupLimit()
    {
        return $this->container['lookup_limit'];
    }

    /**
     * Sets lookup_limit
     *
     * @param int $lookup_limit Limit processing to the latest `<lookupLimit>` entities.
     *
     * @return $this
     */
    public function setLookupLimit($lookup_limit)
    {
        $this->container['lookup_limit'] = $lookup_limit;

        return $this;
    }

    /**
     * Gets muted
     *
     * @return bool
     */
    public function getMuted()
    {
        return $this->container['muted'];
    }

    /**
     * Sets muted
     *
     * @param bool $muted Is muted.
     *
     * @return $this
     */
    public function setMuted($muted)
    {
        $this->container['muted'] = $muted;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets new_failure
     *
     * @return string
     */
    public function getNewFailure()
    {
        return $this->container['new_failure'];
    }

    /**
     * Sets new_failure
     *
     * @param string $new_failure new_failure
     *
     * @return $this
     */
    public function setNewFailure($new_failure)
    {
        $this->container['new_failure'] = $new_failure;

        return $this;
    }

    /**
     * Gets start
     *
     * @return int
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param int $start For paginated calls, from which entity to start rendering the page.
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets test
     *
     * @return string
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param string $test Test locator.
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


