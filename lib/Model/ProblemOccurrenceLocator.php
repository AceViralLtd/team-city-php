<?php
/**
 * ProblemOccurrenceLocator
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProblemOccurrenceLocator Class Doc Comment
 *
 * @category Class
 * @description Represents a locator string for filtering ProblemOccurrence entities.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProblemOccurrenceLocator implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProblemOccurrenceLocator';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'affected_project' => 'string',
        'build' => 'string',
        'count' => 'int',
        'currently_failing' => 'bool',
        'currently_investigated' => 'bool',
        'currently_muted' => 'bool',
        'identity' => 'string',
        'item' => 'string',
        'lookup_limit' => 'int',
        'muted' => 'bool',
        'problem' => 'string',
        'start' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'affected_project' => 'ProjectLocator',
        'build' => 'BuildLocator',
        'count' => 'int32',
        'currently_failing' => null,
        'currently_investigated' => null,
        'currently_muted' => null,
        'identity' => null,
        'item' => 'item:(<locator1>),item:(<locator2>...)',
        'lookup_limit' => 'int32',
        'muted' => null,
        'problem' => null,
        'start' => 'int32',
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affected_project' => 'affectedProject',
        'build' => 'build',
        'count' => 'count',
        'currently_failing' => 'currentlyFailing',
        'currently_investigated' => 'currentlyInvestigated',
        'currently_muted' => 'currentlyMuted',
        'identity' => 'identity',
        'item' => 'item',
        'lookup_limit' => 'lookupLimit',
        'muted' => 'muted',
        'problem' => 'problem',
        'start' => 'start',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affected_project' => 'setAffectedProject',
        'build' => 'setBuild',
        'count' => 'setCount',
        'currently_failing' => 'setCurrentlyFailing',
        'currently_investigated' => 'setCurrentlyInvestigated',
        'currently_muted' => 'setCurrentlyMuted',
        'identity' => 'setIdentity',
        'item' => 'setItem',
        'lookup_limit' => 'setLookupLimit',
        'muted' => 'setMuted',
        'problem' => 'setProblem',
        'start' => 'setStart',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affected_project' => 'getAffectedProject',
        'build' => 'getBuild',
        'count' => 'getCount',
        'currently_failing' => 'getCurrentlyFailing',
        'currently_investigated' => 'getCurrentlyInvestigated',
        'currently_muted' => 'getCurrentlyMuted',
        'identity' => 'getIdentity',
        'item' => 'getItem',
        'lookup_limit' => 'getLookupLimit',
        'muted' => 'getMuted',
        'problem' => 'getProblem',
        'start' => 'getStart',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['affected_project'] = isset($data['affected_project']) ? $data['affected_project'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['currently_failing'] = isset($data['currently_failing']) ? $data['currently_failing'] : null;
        $this->container['currently_investigated'] = isset($data['currently_investigated']) ? $data['currently_investigated'] : null;
        $this->container['currently_muted'] = isset($data['currently_muted']) ? $data['currently_muted'] : null;
        $this->container['identity'] = isset($data['identity']) ? $data['identity'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['lookup_limit'] = isset($data['lookup_limit']) ? $data['lookup_limit'] : null;
        $this->container['muted'] = isset($data['muted']) ? $data['muted'] : null;
        $this->container['problem'] = isset($data['problem']) ? $data['problem'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets affected_project
     *
     * @return string
     */
    public function getAffectedProject()
    {
        return $this->container['affected_project'];
    }

    /**
     * Sets affected_project
     *
     * @param string $affected_project Project (direct or indirect parent) locator.
     *
     * @return $this
     */
    public function setAffectedProject($affected_project)
    {
        $this->container['affected_project'] = $affected_project;

        return $this;
    }

    /**
     * Gets build
     *
     * @return string
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param string $build Build locator.
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count For paginated calls, how many entities to return per page.
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets currently_failing
     *
     * @return bool
     */
    public function getCurrentlyFailing()
    {
        return $this->container['currently_failing'];
    }

    /**
     * Sets currently_failing
     *
     * @param bool $currently_failing Is currently failing.
     *
     * @return $this
     */
    public function setCurrentlyFailing($currently_failing)
    {
        $this->container['currently_failing'] = $currently_failing;

        return $this;
    }

    /**
     * Gets currently_investigated
     *
     * @return bool
     */
    public function getCurrentlyInvestigated()
    {
        return $this->container['currently_investigated'];
    }

    /**
     * Sets currently_investigated
     *
     * @param bool $currently_investigated Is currently investigated.
     *
     * @return $this
     */
    public function setCurrentlyInvestigated($currently_investigated)
    {
        $this->container['currently_investigated'] = $currently_investigated;

        return $this;
    }

    /**
     * Gets currently_muted
     *
     * @return bool
     */
    public function getCurrentlyMuted()
    {
        return $this->container['currently_muted'];
    }

    /**
     * Sets currently_muted
     *
     * @param bool $currently_muted Is currently muted.
     *
     * @return $this
     */
    public function setCurrentlyMuted($currently_muted)
    {
        $this->container['currently_muted'] = $currently_muted;

        return $this;
    }

    /**
     * Gets identity
     *
     * @return string
     */
    public function getIdentity()
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     *
     * @param string $identity identity
     *
     * @return $this
     */
    public function setIdentity($identity)
    {
        $this->container['identity'] = $identity;

        return $this;
    }

    /**
     * Gets item
     *
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string $item Supply multiple locators and return a union of the results.
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets lookup_limit
     *
     * @return int
     */
    public function getLookupLimit()
    {
        return $this->container['lookup_limit'];
    }

    /**
     * Sets lookup_limit
     *
     * @param int $lookup_limit Limit processing to the latest `<lookupLimit>` entities.
     *
     * @return $this
     */
    public function setLookupLimit($lookup_limit)
    {
        $this->container['lookup_limit'] = $lookup_limit;

        return $this;
    }

    /**
     * Gets muted
     *
     * @return bool
     */
    public function getMuted()
    {
        return $this->container['muted'];
    }

    /**
     * Sets muted
     *
     * @param bool $muted Has ever been muted.
     *
     * @return $this
     */
    public function setMuted($muted)
    {
        $this->container['muted'] = $muted;

        return $this;
    }

    /**
     * Gets problem
     *
     * @return string
     */
    public function getProblem()
    {
        return $this->container['problem'];
    }

    /**
     * Sets problem
     *
     * @param string $problem problem
     *
     * @return $this
     */
    public function setProblem($problem)
    {
        $this->container['problem'] = $problem;

        return $this;
    }

    /**
     * Gets start
     *
     * @return int
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param int $start For paginated calls, from which entity to start rendering the page.
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


