<?php
/**
 * BuildType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BuildType Class Doc Comment
 *
 * @category Class
 * @description Represents a build configuration.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'buildType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'internal_id' => 'string',
        'name' => 'string',
        'template_flag' => 'bool',
        'type' => 'string',
        'paused' => 'bool',
        'uuid' => 'string',
        'description' => 'string',
        'project_name' => 'string',
        'project_id' => 'string',
        'project_internal_id' => 'string',
        'href' => 'string',
        'web_url' => 'string',
        'inherited' => 'bool',
        'links' => '\Swagger\Client\Model\Links',
        'project' => '\Swagger\Client\Model\Project',
        'templates' => '\Swagger\Client\Model\BuildTypes',
        'template' => '\Swagger\Client\Model\BuildType',
        'vcs_root_entries' => '\Swagger\Client\Model\VcsRootEntries',
        'settings' => '\Swagger\Client\Model\Properties',
        'parameters' => '\Swagger\Client\Model\Properties',
        'steps' => '\Swagger\Client\Model\Steps',
        'features' => '\Swagger\Client\Model\Features',
        'triggers' => '\Swagger\Client\Model\Triggers',
        'snapshot_dependencies' => '\Swagger\Client\Model\SnapshotDependencies',
        'artifact_dependencies' => '\Swagger\Client\Model\ArtifactDependencies',
        'agent_requirements' => '\Swagger\Client\Model\AgentRequirements',
        'branches' => '\Swagger\Client\Model\Branches',
        'builds' => '\Swagger\Client\Model\Builds',
        'investigations' => '\Swagger\Client\Model\Investigations',
        'compatible_agents' => '\Swagger\Client\Model\Agents',
        'vcs_root_instances' => '\Swagger\Client\Model\VcsRootInstances',
        'external_status_allowed' => 'bool',
        'locator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'internal_id' => null,
        'name' => null,
        'template_flag' => null,
        'type' => null,
        'paused' => null,
        'uuid' => null,
        'description' => null,
        'project_name' => null,
        'project_id' => null,
        'project_internal_id' => null,
        'href' => null,
        'web_url' => null,
        'inherited' => null,
        'links' => null,
        'project' => null,
        'templates' => null,
        'template' => null,
        'vcs_root_entries' => null,
        'settings' => null,
        'parameters' => null,
        'steps' => null,
        'features' => null,
        'triggers' => null,
        'snapshot_dependencies' => null,
        'artifact_dependencies' => null,
        'agent_requirements' => null,
        'branches' => null,
        'builds' => null,
        'investigations' => null,
        'compatible_agents' => null,
        'vcs_root_instances' => null,
        'external_status_allowed' => null,
        'locator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'internal_id' => 'internalId',
        'name' => 'name',
        'template_flag' => 'templateFlag',
        'type' => 'type',
        'paused' => 'paused',
        'uuid' => 'uuid',
        'description' => 'description',
        'project_name' => 'projectName',
        'project_id' => 'projectId',
        'project_internal_id' => 'projectInternalId',
        'href' => 'href',
        'web_url' => 'webUrl',
        'inherited' => 'inherited',
        'links' => 'links',
        'project' => 'project',
        'templates' => 'templates',
        'template' => 'template',
        'vcs_root_entries' => 'vcs-root-entries',
        'settings' => 'settings',
        'parameters' => 'parameters',
        'steps' => 'steps',
        'features' => 'features',
        'triggers' => 'triggers',
        'snapshot_dependencies' => 'snapshot-dependencies',
        'artifact_dependencies' => 'artifact-dependencies',
        'agent_requirements' => 'agent-requirements',
        'branches' => 'branches',
        'builds' => 'builds',
        'investigations' => 'investigations',
        'compatible_agents' => 'compatibleAgents',
        'vcs_root_instances' => 'vcsRootInstances',
        'external_status_allowed' => 'externalStatusAllowed',
        'locator' => 'locator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'internal_id' => 'setInternalId',
        'name' => 'setName',
        'template_flag' => 'setTemplateFlag',
        'type' => 'setType',
        'paused' => 'setPaused',
        'uuid' => 'setUuid',
        'description' => 'setDescription',
        'project_name' => 'setProjectName',
        'project_id' => 'setProjectId',
        'project_internal_id' => 'setProjectInternalId',
        'href' => 'setHref',
        'web_url' => 'setWebUrl',
        'inherited' => 'setInherited',
        'links' => 'setLinks',
        'project' => 'setProject',
        'templates' => 'setTemplates',
        'template' => 'setTemplate',
        'vcs_root_entries' => 'setVcsRootEntries',
        'settings' => 'setSettings',
        'parameters' => 'setParameters',
        'steps' => 'setSteps',
        'features' => 'setFeatures',
        'triggers' => 'setTriggers',
        'snapshot_dependencies' => 'setSnapshotDependencies',
        'artifact_dependencies' => 'setArtifactDependencies',
        'agent_requirements' => 'setAgentRequirements',
        'branches' => 'setBranches',
        'builds' => 'setBuilds',
        'investigations' => 'setInvestigations',
        'compatible_agents' => 'setCompatibleAgents',
        'vcs_root_instances' => 'setVcsRootInstances',
        'external_status_allowed' => 'setExternalStatusAllowed',
        'locator' => 'setLocator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'internal_id' => 'getInternalId',
        'name' => 'getName',
        'template_flag' => 'getTemplateFlag',
        'type' => 'getType',
        'paused' => 'getPaused',
        'uuid' => 'getUuid',
        'description' => 'getDescription',
        'project_name' => 'getProjectName',
        'project_id' => 'getProjectId',
        'project_internal_id' => 'getProjectInternalId',
        'href' => 'getHref',
        'web_url' => 'getWebUrl',
        'inherited' => 'getInherited',
        'links' => 'getLinks',
        'project' => 'getProject',
        'templates' => 'getTemplates',
        'template' => 'getTemplate',
        'vcs_root_entries' => 'getVcsRootEntries',
        'settings' => 'getSettings',
        'parameters' => 'getParameters',
        'steps' => 'getSteps',
        'features' => 'getFeatures',
        'triggers' => 'getTriggers',
        'snapshot_dependencies' => 'getSnapshotDependencies',
        'artifact_dependencies' => 'getArtifactDependencies',
        'agent_requirements' => 'getAgentRequirements',
        'branches' => 'getBranches',
        'builds' => 'getBuilds',
        'investigations' => 'getInvestigations',
        'compatible_agents' => 'getCompatibleAgents',
        'vcs_root_instances' => 'getVcsRootInstances',
        'external_status_allowed' => 'getExternalStatusAllowed',
        'locator' => 'getLocator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_REGULAR = 'regular';
    const TYPE_COMPOSITE = 'composite';
    const TYPE_DEPLOYMENT = 'deployment';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REGULAR,
            self::TYPE_COMPOSITE,
            self::TYPE_DEPLOYMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['template_flag'] = isset($data['template_flag']) ? $data['template_flag'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['paused'] = isset($data['paused']) ? $data['paused'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['project_internal_id'] = isset($data['project_internal_id']) ? $data['project_internal_id'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['web_url'] = isset($data['web_url']) ? $data['web_url'] : null;
        $this->container['inherited'] = isset($data['inherited']) ? $data['inherited'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['templates'] = isset($data['templates']) ? $data['templates'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['vcs_root_entries'] = isset($data['vcs_root_entries']) ? $data['vcs_root_entries'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['steps'] = isset($data['steps']) ? $data['steps'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['triggers'] = isset($data['triggers']) ? $data['triggers'] : null;
        $this->container['snapshot_dependencies'] = isset($data['snapshot_dependencies']) ? $data['snapshot_dependencies'] : null;
        $this->container['artifact_dependencies'] = isset($data['artifact_dependencies']) ? $data['artifact_dependencies'] : null;
        $this->container['agent_requirements'] = isset($data['agent_requirements']) ? $data['agent_requirements'] : null;
        $this->container['branches'] = isset($data['branches']) ? $data['branches'] : null;
        $this->container['builds'] = isset($data['builds']) ? $data['builds'] : null;
        $this->container['investigations'] = isset($data['investigations']) ? $data['investigations'] : null;
        $this->container['compatible_agents'] = isset($data['compatible_agents']) ? $data['compatible_agents'] : null;
        $this->container['vcs_root_instances'] = isset($data['vcs_root_instances']) ? $data['vcs_root_instances'] : null;
        $this->container['external_status_allowed'] = isset($data['external_status_allowed']) ? $data['external_status_allowed'] : null;
        $this->container['locator'] = isset($data['locator']) ? $data['locator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id internal_id
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets template_flag
     *
     * @return bool
     */
    public function getTemplateFlag()
    {
        return $this->container['template_flag'];
    }

    /**
     * Sets template_flag
     *
     * @param bool $template_flag template_flag
     *
     * @return $this
     */
    public function setTemplateFlag($template_flag)
    {
        $this->container['template_flag'] = $template_flag;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets paused
     *
     * @return bool
     */
    public function getPaused()
    {
        return $this->container['paused'];
    }

    /**
     * Sets paused
     *
     * @param bool $paused paused
     *
     * @return $this
     */
    public function setPaused($paused)
    {
        $this->container['paused'] = $paused;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_internal_id
     *
     * @return string
     */
    public function getProjectInternalId()
    {
        return $this->container['project_internal_id'];
    }

    /**
     * Sets project_internal_id
     *
     * @param string $project_internal_id project_internal_id
     *
     * @return $this
     */
    public function setProjectInternalId($project_internal_id)
    {
        $this->container['project_internal_id'] = $project_internal_id;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets web_url
     *
     * @return string
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     *
     * @param string $web_url web_url
     *
     * @return $this
     */
    public function setWebUrl($web_url)
    {
        $this->container['web_url'] = $web_url;

        return $this;
    }

    /**
     * Gets inherited
     *
     * @return bool
     */
    public function getInherited()
    {
        return $this->container['inherited'];
    }

    /**
     * Sets inherited
     *
     * @param bool $inherited inherited
     *
     * @return $this
     */
    public function setInherited($inherited)
    {
        $this->container['inherited'] = $inherited;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\Links
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\Links $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\Project
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\Project $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets templates
     *
     * @return \Swagger\Client\Model\BuildTypes
     */
    public function getTemplates()
    {
        return $this->container['templates'];
    }

    /**
     * Sets templates
     *
     * @param \Swagger\Client\Model\BuildTypes $templates templates
     *
     * @return $this
     */
    public function setTemplates($templates)
    {
        $this->container['templates'] = $templates;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \Swagger\Client\Model\BuildType
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \Swagger\Client\Model\BuildType $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets vcs_root_entries
     *
     * @return \Swagger\Client\Model\VcsRootEntries
     */
    public function getVcsRootEntries()
    {
        return $this->container['vcs_root_entries'];
    }

    /**
     * Sets vcs_root_entries
     *
     * @param \Swagger\Client\Model\VcsRootEntries $vcs_root_entries vcs_root_entries
     *
     * @return $this
     */
    public function setVcsRootEntries($vcs_root_entries)
    {
        $this->container['vcs_root_entries'] = $vcs_root_entries;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Swagger\Client\Model\Properties
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Swagger\Client\Model\Properties $settings settings
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Swagger\Client\Model\Properties
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Swagger\Client\Model\Properties $parameters parameters
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \Swagger\Client\Model\Steps
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \Swagger\Client\Model\Steps $steps steps
     *
     * @return $this
     */
    public function setSteps($steps)
    {
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \Swagger\Client\Model\Features
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \Swagger\Client\Model\Features $features features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets triggers
     *
     * @return \Swagger\Client\Model\Triggers
     */
    public function getTriggers()
    {
        return $this->container['triggers'];
    }

    /**
     * Sets triggers
     *
     * @param \Swagger\Client\Model\Triggers $triggers triggers
     *
     * @return $this
     */
    public function setTriggers($triggers)
    {
        $this->container['triggers'] = $triggers;

        return $this;
    }

    /**
     * Gets snapshot_dependencies
     *
     * @return \Swagger\Client\Model\SnapshotDependencies
     */
    public function getSnapshotDependencies()
    {
        return $this->container['snapshot_dependencies'];
    }

    /**
     * Sets snapshot_dependencies
     *
     * @param \Swagger\Client\Model\SnapshotDependencies $snapshot_dependencies snapshot_dependencies
     *
     * @return $this
     */
    public function setSnapshotDependencies($snapshot_dependencies)
    {
        $this->container['snapshot_dependencies'] = $snapshot_dependencies;

        return $this;
    }

    /**
     * Gets artifact_dependencies
     *
     * @return \Swagger\Client\Model\ArtifactDependencies
     */
    public function getArtifactDependencies()
    {
        return $this->container['artifact_dependencies'];
    }

    /**
     * Sets artifact_dependencies
     *
     * @param \Swagger\Client\Model\ArtifactDependencies $artifact_dependencies artifact_dependencies
     *
     * @return $this
     */
    public function setArtifactDependencies($artifact_dependencies)
    {
        $this->container['artifact_dependencies'] = $artifact_dependencies;

        return $this;
    }

    /**
     * Gets agent_requirements
     *
     * @return \Swagger\Client\Model\AgentRequirements
     */
    public function getAgentRequirements()
    {
        return $this->container['agent_requirements'];
    }

    /**
     * Sets agent_requirements
     *
     * @param \Swagger\Client\Model\AgentRequirements $agent_requirements agent_requirements
     *
     * @return $this
     */
    public function setAgentRequirements($agent_requirements)
    {
        $this->container['agent_requirements'] = $agent_requirements;

        return $this;
    }

    /**
     * Gets branches
     *
     * @return \Swagger\Client\Model\Branches
     */
    public function getBranches()
    {
        return $this->container['branches'];
    }

    /**
     * Sets branches
     *
     * @param \Swagger\Client\Model\Branches $branches branches
     *
     * @return $this
     */
    public function setBranches($branches)
    {
        $this->container['branches'] = $branches;

        return $this;
    }

    /**
     * Gets builds
     *
     * @return \Swagger\Client\Model\Builds
     */
    public function getBuilds()
    {
        return $this->container['builds'];
    }

    /**
     * Sets builds
     *
     * @param \Swagger\Client\Model\Builds $builds builds
     *
     * @return $this
     */
    public function setBuilds($builds)
    {
        $this->container['builds'] = $builds;

        return $this;
    }

    /**
     * Gets investigations
     *
     * @return \Swagger\Client\Model\Investigations
     */
    public function getInvestigations()
    {
        return $this->container['investigations'];
    }

    /**
     * Sets investigations
     *
     * @param \Swagger\Client\Model\Investigations $investigations investigations
     *
     * @return $this
     */
    public function setInvestigations($investigations)
    {
        $this->container['investigations'] = $investigations;

        return $this;
    }

    /**
     * Gets compatible_agents
     *
     * @return \Swagger\Client\Model\Agents
     */
    public function getCompatibleAgents()
    {
        return $this->container['compatible_agents'];
    }

    /**
     * Sets compatible_agents
     *
     * @param \Swagger\Client\Model\Agents $compatible_agents compatible_agents
     *
     * @return $this
     */
    public function setCompatibleAgents($compatible_agents)
    {
        $this->container['compatible_agents'] = $compatible_agents;

        return $this;
    }

    /**
     * Gets vcs_root_instances
     *
     * @return \Swagger\Client\Model\VcsRootInstances
     */
    public function getVcsRootInstances()
    {
        return $this->container['vcs_root_instances'];
    }

    /**
     * Sets vcs_root_instances
     *
     * @param \Swagger\Client\Model\VcsRootInstances $vcs_root_instances vcs_root_instances
     *
     * @return $this
     */
    public function setVcsRootInstances($vcs_root_instances)
    {
        $this->container['vcs_root_instances'] = $vcs_root_instances;

        return $this;
    }

    /**
     * Gets external_status_allowed
     *
     * @return bool
     */
    public function getExternalStatusAllowed()
    {
        return $this->container['external_status_allowed'];
    }

    /**
     * Sets external_status_allowed
     *
     * @param bool $external_status_allowed external_status_allowed
     *
     * @return $this
     */
    public function setExternalStatusAllowed($external_status_allowed)
    {
        $this->container['external_status_allowed'] = $external_status_allowed;

        return $this;
    }

    /**
     * Gets locator
     *
     * @return string
     */
    public function getLocator()
    {
        return $this->container['locator'];
    }

    /**
     * Sets locator
     *
     * @param string $locator locator
     *
     * @return $this
     */
    public function setLocator($locator)
    {
        $this->container['locator'] = $locator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


